# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import api_pb2 as api__pb2


class PublicAPIStub(object):
  """PublicAPI defines the read-only APIs that will be supported.
  These will be handled over TCP sockets.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetInfo = channel.unary_unary(
        '/v1alpha.PublicAPI/GetInfo',
        request_serializer=api__pb2.GetInfoRequest.SerializeToString,
        response_deserializer=api__pb2.GetInfoResponse.FromString,
        )
    self.ListPods = channel.unary_unary(
        '/v1alpha.PublicAPI/ListPods',
        request_serializer=api__pb2.ListPodsRequest.SerializeToString,
        response_deserializer=api__pb2.ListPodsResponse.FromString,
        )
    self.InspectPod = channel.unary_unary(
        '/v1alpha.PublicAPI/InspectPod',
        request_serializer=api__pb2.InspectPodRequest.SerializeToString,
        response_deserializer=api__pb2.InspectPodResponse.FromString,
        )
    self.ListImages = channel.unary_unary(
        '/v1alpha.PublicAPI/ListImages',
        request_serializer=api__pb2.ListImagesRequest.SerializeToString,
        response_deserializer=api__pb2.ListImagesResponse.FromString,
        )
    self.InspectImage = channel.unary_unary(
        '/v1alpha.PublicAPI/InspectImage',
        request_serializer=api__pb2.InspectImageRequest.SerializeToString,
        response_deserializer=api__pb2.InspectImageResponse.FromString,
        )
    self.ListenEvents = channel.unary_stream(
        '/v1alpha.PublicAPI/ListenEvents',
        request_serializer=api__pb2.ListenEventsRequest.SerializeToString,
        response_deserializer=api__pb2.ListenEventsResponse.FromString,
        )
    self.GetLogs = channel.unary_stream(
        '/v1alpha.PublicAPI/GetLogs',
        request_serializer=api__pb2.GetLogsRequest.SerializeToString,
        response_deserializer=api__pb2.GetLogsResponse.FromString,
        )


class PublicAPIServicer(object):
  """PublicAPI defines the read-only APIs that will be supported.
  These will be handled over TCP sockets.
  """

  def GetInfo(self, request, context):
    """GetInfo gets the rkt's information on the machine.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListPods(self, request, context):
    """ListPods lists rkt pods on the machine.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InspectPod(self, request, context):
    """InspectPod gets detailed pod information of the specified pod.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListImages(self, request, context):
    """ListImages lists the images on the machine.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InspectImage(self, request, context):
    """InspectImage gets the detailed image information of the specified image.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListenEvents(self, request, context):
    """ListenEvents listens for the events, it will return a response stream
    that will contain event objects.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLogs(self, request, context):
    """GetLogs gets the logs for a pod, if the app is also specified, then only the logs
    of the app will be returned.

    If 'follow' in the 'GetLogsRequest' is set to 'true', then the response stream
    will not be closed after the first response, the future logs will be sent via
    the stream.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PublicAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetInfo': grpc.unary_unary_rpc_method_handler(
          servicer.GetInfo,
          request_deserializer=api__pb2.GetInfoRequest.FromString,
          response_serializer=api__pb2.GetInfoResponse.SerializeToString,
      ),
      'ListPods': grpc.unary_unary_rpc_method_handler(
          servicer.ListPods,
          request_deserializer=api__pb2.ListPodsRequest.FromString,
          response_serializer=api__pb2.ListPodsResponse.SerializeToString,
      ),
      'InspectPod': grpc.unary_unary_rpc_method_handler(
          servicer.InspectPod,
          request_deserializer=api__pb2.InspectPodRequest.FromString,
          response_serializer=api__pb2.InspectPodResponse.SerializeToString,
      ),
      'ListImages': grpc.unary_unary_rpc_method_handler(
          servicer.ListImages,
          request_deserializer=api__pb2.ListImagesRequest.FromString,
          response_serializer=api__pb2.ListImagesResponse.SerializeToString,
      ),
      'InspectImage': grpc.unary_unary_rpc_method_handler(
          servicer.InspectImage,
          request_deserializer=api__pb2.InspectImageRequest.FromString,
          response_serializer=api__pb2.InspectImageResponse.SerializeToString,
      ),
      'ListenEvents': grpc.unary_stream_rpc_method_handler(
          servicer.ListenEvents,
          request_deserializer=api__pb2.ListenEventsRequest.FromString,
          response_serializer=api__pb2.ListenEventsResponse.SerializeToString,
      ),
      'GetLogs': grpc.unary_stream_rpc_method_handler(
          servicer.GetLogs,
          request_deserializer=api__pb2.GetLogsRequest.FromString,
          response_serializer=api__pb2.GetLogsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'v1alpha.PublicAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
